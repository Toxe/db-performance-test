// generated by /opt/vcpkg/installed/x64-osx/scripts/sqlpp11-ddl2cpp db_performance_test.ddl performance Performance
#ifndef PERFORMANCE_PERFORMANCE_H
#define PERFORMANCE_PERFORMANCE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace Performance
{
  namespace Performance_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  } // namespace Performance_

  struct Performance: sqlpp::table_t<Performance,
               Performance_::Id,
               Performance_::Time,
               Performance_::Text>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "performance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T performance;
        T& operator()() { return performance; }
        const T& operator()() const { return performance; }
      };
    };
  };
} // namespace Performance
#endif
